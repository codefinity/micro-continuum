Build Microservices:
--------------------
mvn clean package -DskipTests

Build Docker:
-------------
sudo docker-compose -f ./docker-compose.development.yml up --force-recreate --build

sudo docker-compose -f ./docker-compose.development.yml down

Microservices Ports:
--------------------

eureka-service-discovery:8761
config-server: 		8888
zuul-api-gateway: 	8095
hystrix-dashboard:	8090
turbine-dashboard:	9010
zipkin-server:		
user-microservice:	
x-microservice: 	8020
y-microservice: 	8030
z-microservice: 	8040
email-microservice:	
notification-microservice:
chat-microservice:
management:
audit-microservice:
search-microservice:
geography-microservice:
template-microservice:


URLs of Microservices:
----------------------

x-microservice: http://localhost:8020/ 
y-microservice: http://localhost:8030/ 
z-microservice: http://localhost:8040/


Eureka Dashboard:
-----------------

http://localhost:8761/


ZUUL Url:
---------

http://localhost:8095/x-microservice/testproperty
http://localhost:8095/y-microservice/
http://localhost:8095/z-microservice/

Spring Cloud Stream Test:
-------------------------

http://localhost:8095/x-microservice/cloudstreamingtest

Circuit Breaker URL:
--------------------

http://localhost:8095/y-service/user/1

Hystrix:

URL: http://localhost:8090/hystrix
Add Url: http://zuul-api-gateway:8095/hystrix.stream

Turbine:

URL: http://localhost:9010/hystrix
Add URL: http://turbine-dashboard:9010/turbine.stream

Load Balancing:
---------------

Start: config server, discovery, zuul

java -Dserver.port=2222 -jar y-microservice-1.0.jar
java -Dserver.port=1111 -jar y-microservice-1.0.jar

load this url in the browser: http://localhost:8095/y-microservice/user/1

KIBANA:
-------

URL: http://localhost:5601/

Add:

Default Index Pattern: logstash-*
Field: @timestamp

Zipkin:
-------
http://localhost:9411/

Test using 
For feign: http://localhost:8095/x-microservice/sleuthtest
For RabbitMQ: http://localhost:8095/x-microservice/cloudstreamingtest

Zipkin only works with spring boot 1.5. Using a prebuilt Zipkin jar for server for now.
Zipkin-Server Project exists for future implementation when Zipkin is compatable with Spring Boot 2.0.


Testing Endpoints:
------------------

Microservice Functioning: 			http://localhost:8095/x-microservice/hello
Reading Config Property From Config Server: 	http://localhost:8095/x-microservice/configservertest
Feign Test: 					http://localhost:8095/x-microservice/feigntest/1

Management Endpoints:
---------------------

http://localhost:8020/bus-refresh
http://localhost:8020/refresh
http://localhost:8020/features
http://localhost:8020/info
http://localhost:8020/health
http://localhost:8020/metrics
http://localhost:8020/shutdown
http://localhost:8020/resume
http://localhost:8020/pause
http://localhost:8020/restart
http://localhost:8020/scheduledtasks

Commands:

Stop: 		curl -X POST http://localhost:8020/shutdown
Refresh Config: curl -X POST http://localhost:8020/refresh
Bus Refresh:	curl -X POST http://localhost:8020/bus-refresh


ToDo:
-----
* Binders:

	Understand the concept and implement.
	Support for JSON Message - Searialize and Deserailiaze
	Reference:
	http://cloud.spring.io/spring-cloud-stream/
	http://www.baeldung.com/spring-cloud-stream
	

* Block Endpoint management acess through ZUUL.

* Security for Actuator Endpoints. Only allowed roles will have access.

* Multiple config servers enabling

* Multiple Discovery Clients

* Logging Microservice name in the logs using Sleuth.

* Sending JSON data over RabbitMQ and desearlizing it on receiving end.

* Secure communication between microservice and config server.

* Secure communication between microservices using Feign.
	https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html

* Eureka server security

* See how to send Domain Event message in spring cloud stream.

* Deploy docker on multiple servers.

* Look into these endpoints

endpoints:
  restart:
    enabled: true
  shutdown:
    enabled: true
  health:
    sensitive: false

* How does load balancong work in docker swarm mode?








 
