Build Docker:
-------------
sudo docker-compose -f ./docker-compose.development.yml up --force-recreate --build

Microservices Ports:
--------------------

eureka-service-discovery:
config-server:
zuul-api-gateway:
hystrix-dashboard:
turbine-dashboard:
zipkin-server:
user-microservice:
x-microservice:
y-microservice:
z-microservice:
email-microservice:
notification-microservice:
chat-microservice:
management:
audit-microservice:
search-microservice:
geography-microservice:
template-microservice:


URLs of Microservices:
----------------------

x-microservice: http://localhost:8020/ 
y-microservice: http://localhost:8030/ 
z-microservice: http://localhost:8040/

To Refresh the properties of a particular microservice:
-------------------------------------------------------

curl -X POST http://localhost:8020/refresh


To Refresh the properties of all microservices:
-----------------------------------------------

curl -X POST http://localhost:8020/bus-refresh

Eureka Dashboard:
-----------------

http://localhost:8761/


ZUUL Url:
---------

http://localhost:8095/x-microservice/testproperty
http://localhost:8095/y-microservice/
http://localhost:8095/z-microservice/

Spring Cloud Stream Test:
-------------------------

http://localhost:8095/x-microservice/testspringcloudstreaming

Circuit Breaker URL:
--------------------

http://localhost:8095/y-service/user/1

Hystrix:
-------

URL: http://localhost:8090/hystrix
Add Url: http://localhost:8090/hystrix

Turbine:
--------
URL: http://localhost:9010/hystrix
Add URL: http://localhost:9010/turbine.stream

Load Balancing:
---------------

Start: config server, discovery, zuul

java -Dserver.port=2222 -jar y-microservice-1.0.jar
java -Dserver.port=1111 -jar y-microservice-1.0.jar

load this url in the browser: http://localhost:8095/y-microservice/user/1

KIBANA:
-------

URL: http://localhost:5601/

Add:

Default Index Pattern: logstash-*
Field: @timestamp

Zipkin:
-------
http://localhost:9411/

Test using 
For feign: http://localhost:8095/x-microservice/sleuthtest
For RabbitMQ: For feign: http://localhost:8095/x-microservice/testspringcloudstreaming

Zipkin only works with spring boot 1.5. Using a prebuilt Zipkin jar for server for now.
Zipkin-Server Project exists for future implementation when Zipkin is compatable with Spring Boot 2.0.


Testing Endpoints:
------------------

Microservice Functioning: http://localhost:8095/x-microservice/hello
Reading Config Property From Config Server: http://localhost:8095/x-microservice/configservertest
Feign Test: http://localhost:8095/x-microservice/feigntest/1



ToDo:
-----
* Multiple config servers enabling - Done

* Multiple Discovery Clients

* Logging Microservice name in the logs using Sleuth.

* Sending JSON data over RabbitMQ and desearlizing it on receiving end.

* Secure communication between microservice and config server.

* Secure communication between microservices using Feign.
	https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html

* Eureka server security

* See how to send Domain Event message in spring cloud stream.

* Deploy docker on multiple servers.






 
